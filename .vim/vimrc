" vim: set fdm=marker:

set nocompatible

" Plugins {{{

" https://github.com/huntie/dotfiles/blob/f8a129f8e306c853ab52234f605b1d872b0448b1/vim/.vimrc#L72-L77
" Install and run vim-plug on first run
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plug 'bronson/vim-trailing-whitespace'
" Plug 'dag/vim-fish'
" Plug 'easymotion/vim-easymotion'
" Plug 'editorconfig/editorconfig-vim'
" Plug 'itchyny/lightline.vim'
" Plug 'itchyny/vim-gitbranch'
" Plug 'mattn/emmet-vim'
" Plug 'morhetz/gruvbox'
" Plug 'pangloss/vim-javascript'
" Plug 'reedes/vim-colors-pencil'
" Plug 'scrooloose/nerdtree'
" Plug 'terryma/vim-multiple-cursors'
" Plug 'tpope/vim-eunuch'
" Plug 'w0rp/ale'

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'airblade/vim-gitgutter'
Plug 'aliou/bats.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'davidhalter/jedi-vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'neomake/neomake'
Plug 'tmhedberg/SimpylFold'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'suy/vim-context-commentstring'
Plug 'hashivim/vim-terraform'
Plug 'vim-syntastic/syntastic'
Plug 'juliosueiras/vim-terraform-completion'
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' }
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'dracula/vim', { 'as': 'dracula' }
call plug#end()

" }}}

set background=dark
" colorscheme solarized
colorscheme dracula

" Better tab completion in the commandline.  Make commandline-completion
" (after you type :) behave more useful and roughly like most shells do.
"
" See 'wildmode' on how to configure the completion mode to your liking.
" 'wildignore' is also a useful setting to ignore binary files such as compiler
" output, images, etc.
set wildmenu
set wildmode=list:longest  " List all matches and complete to the longest match.

" Show (partial) command in bottom-right.  Vim had many commands that
" consist of two or more keystrokes. If this option is enabled Vim will show the
" command you've typed thus-far in the bottom-right of the screen.
"
" It will also show the size of the selection in |visual-mode|.
set showcmd

" Wrap long lines.  When long lines are *not* wrapped Vim will hide any text
" that's larger than the screen and scroll horizontally.
"
" Also see 'breakindent' for continuing wrapped lines on the same indent level
" (requires Vim 7.4.338) and 'linebreak' to wrap only at the end of words.
"
" You can also use |gj| and |gk| to navigate "visual" lines more easily. Many
" people line to override the default behaviour by remapping keys with something
" like:
"
" nnoremap k gk nnoremap j gj nnoremap gk nnoremap gj inoremap gj inoremap gk
set wrap

" Wrap at n characters.  Automatically break lines at *n* characters.
set textwidth=80

" Highlight the last used search pattern.  Highlight the last used search
" pattern.
"
" The last used search pattern is stored in the / register. This will highlight
" whatever is in that pattern.
"
" You can use |:nohlsearch| to clear the highlighting. Many people like to map
" this to e.g. |CTRL-L|:
"
" nnoremap &lt;silent> &lt;C-l> :nohlsearch&lt;CR>&lt;C-l>
set hlsearch

" Searching with / is case-insensitive.  Case-insensitive searching unless
" the pattern contains an upper case letter or if |/\C| is in the pattern.
set ignorecase
set smartcase              " Disable 'ignorecase' if the term contains upper-case.

set expandtab

" Size of a Tab character.  Number of spaces to display tab characters as.
set tabstop=4

set shiftwidth=0           " Use same value as 'tabstop'.
set softtabstop=-1         " Use same value as 'shiftwidth'.

" Minimum number of lines to keep above/below cursor.  Keep lines above and
" below the screen when scrolling up or down. This is useful so you have some
" context what you’re scrolling to.
"
" Also see 'sidescrolloff'.
set scrolloff=5

" Control automatic formatting.  The 'formatoptions' setting controls how
" automatic formatting when inserting text, formatting with |gq|, as well as
" some other commands.
"
" n – Recognize numbered lists when formatting (see 'formatlistpat').
" c – Wrap comments with 'textwidth'.
" r – Insert comment char after enter.
" o – Insert comment char after |o|/|O|.
" q – Format comments with |gq|.
" l – Do not break lines when they were longer than 'textwidth' to start with.
" j – Remove comment character when joining lines with |J|.
set formatoptions+=ncroqlj

set viminfo+=n~/.vim/tmp/viminfo
set backupdir=$HOME/.vim/tmp/backup
set dir=$HOME/.vim/tmp/swap
set viewdir=$HOME/.vim/tmp/view
if !isdirectory(&backupdir) | call mkdir(&backupdir, 'p', 0700) | endif
if !isdirectory(&dir)       | call mkdir(&dir, 'p', 0700)       | endif
if !isdirectory(&viewdir)   | call mkdir(&viewdir, 'p', 0700)   | endif

" Persist undo history between Vim sessions.  Store undo history to a file,
" so that it can be recalled in future Vim sessions.
"
" Also see "How can I use the undofile?": https://vi.stackexchange.com/q/6/51
" and "Can I be notified when I'm undoing changes from the undofile?":
" https://vi.stackexchange.com/q/2115/51.
if has('persistent_undo')
        " set undofile
	set undodir=$HOME/.vim/tmp/undo
	if !isdirectory(&undodir) | call mkdir(&undodir, 'p', 0700) | endif
endif

" Indent in visual and select mode automatically re-selects.  Selecting some
" text in |visual-mode| and then changing the indentation with |v_>| and |v_<|
" will make Vim lose the visual selection, which is annoying if you want to
" change several levels of indentation.
"
" With this mapping it will re-select the last selection after using &lt; or
" &gt;.
vnoremap > >gv
vnoremap < <gv

" Go to the last cursor location when opening a file.  Go to the last cursor
" location when a file is opened, unless this is a git commit (in which case
" it's annoying).
"
" This uses the information stored in the 'viminfo' file.
augroup jump
	autocmd BufReadPost *
		\  if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
			\| exe 'normal! g`"'
		\| endif
augroup end

" Clean trailing whitespace.  This command removes all trailing whitespace
" in a file, without causing any side-effects.
"
" Also see "What's the simplest way to strip trailing whitespace from all lines
" in a file?": https://vi.stackexchange.com/a/454/51.
fun! s:trim_whitespace()
	let l:save = winsaveview()
	keeppatterns %s/\s\+$//e
	call winrestview(l:save)
endfun
command! TrimWhitespace call s:trim_whitespace()

" https://gist.github.com/dragonken/c29123e597c6fdf022284cf36d245b64
" Get the 2-space YAML as the default when hit carriage return after the colon
" autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" https://stackoverflow.com/questions/45129838/use-only-hard-tab-only-in-certain-files
" If you are asking how to configure whether you use hard tabs (tab characters) vs. 
" spaces for indentation, based on filetype, you can do that using autocmd hooks.
"
" For example, here is my base indent configuration for most files. It sets a tabstop 
" of 8 (for hard tab display), and most tabs / indentation shifts are 4, and they use spaces, not hard tabs.
"set tabstop=8 softtabstop=4 shiftwidth=4 expandtab
set tabstop=8 shiftwidth=4 expandtab
"
" However, in some syntaxes that is wrong. For instance, I want 2 spaces in Javascript and YAML. 
" And in Makefiles, space indent is a syntax error - there, I want hard tabs. You can set these things 
" using autocmd and the filetype in question.
autocmd Filetype make       setlocal noexpandtab
autocmd Filetype yaml       setlocal shiftwidth=2 softtabstop=2
autocmd Filetype javascript setlocal shiftwidth=2 softtabstop=2
autocmd Filetype javascriptreact setlocal shiftwidth=2 softtabstop=2
" autocmd Filetype yaml       setlocal shiftwidth=2
" autocmd Filetype javascript setlocal shiftwidth=2
"
" If you don't want to specify by file type you can also specify the filename (or a glob to match filenames).
" autocmd BufNewFile,BufRead rsnapshot.conf setlocal noexpandtab

" https://jeffkreeftmeijer.com/vim-number/
set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" http://vim.wikia.com/wiki/Modeline_magic
set modeline

" https://thoughtbot.com/blog/vim-splits-move-faster-and-more-naturally#easier-split-navigations
" easier split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" more natural split opening
set splitbelow
set splitright

" netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
" let g:netrw_browse_split = 4
let g:netrw_winsize = 20

" " remap <esc> key
" inoremap jk <esc>
" inoremap kj <esc>
" " inoremap <esc> <nop>

" https://stackoverflow.com/questions/8958357/vim-plugin-for-auto-closed-parenthesis
" escape using ^v before typing the mapped character
" ino () ()
" ino " ""<left>
" ino ' ''<left>
" ino ( ()<left>
" ino [ []<left>
" ino { {}<left>
" ino {<CR> {<CR>}<ESC>O

" https://www.vimfromscratch.com/articles/vim-for-python
" To toggle a fold you can press za (:help fold-commands), and I have it mapped to Space for convenience.
nnoremap <space> za

" https://github.com/tmhedberg/SimpylFold
" Preview docstring in fold text
let g:SimpylFold_docstring_preview = 1

" enable folding on markdown headings
let g:markdown_folding = 1
" set nofoldenable
" set foldlevel=99

" https://github.com/neomake/neomake
let g:neomake_open_list = 2

function! MyOnBattery()
  if has('macunix')
    return match(system('pmset -g batt'), "Now drawing from 'Battery Power'") != -1
  elseif has('unix')
    return readfile('/sys/class/power_supply/AC/online') == ['0']
  endif
  return 0
endfunction

if MyOnBattery()
  call neomake#configure#automake('w')
else
  call neomake#configure#automake('nw', 1000)
endif

" https://stevelosh.com/blog/2010/09/coming-home-to-vim/#using-the-leader
let mapleader = ","

" use '#' instead of '/* */' style commenting in *.tf files
" autocmd FileType tf setlocal commentstring=\#\ %s

" https://github.com/hashivim/vim-terraform/blob/master/doc/hcl.txt
let g:hcl_align = 1
let g:hcl_fold_sections = 1

" https://github.com/hashivim/vim-terraform/blob/master/doc/terraform.txt
let g:terraform_align = 1
let g:terraform_fmt_on_save = 1
let g:terraform_fold_sections = 1

let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_python_binary_path = 'python'

""""" the following options are no longer needed, as they are included by default in the tpope/vim-sensible plugin """""

"filetype plugin indent on
"syntax on
"set autoindent
"set backspace=2
"set smarttab
"set nrformats-=octal
"set incsearch
"set laststatus=2
"set ruler
"set display=lastline
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  "runtime! macros/matchit.vim
"endif
