set nocompatible
set autoindent
filetype plugin indent on

syntax on
set background=dark
colorscheme solarized

" Make the backspace behave as most applications. 
" Vim's default behaviour when pressing the backspacing is somewhat peculiar, it
" won’t allow you to backspace to the previous line, automatically inserted
" indentation, or previously inserted text.
set backspace=2

" Show as much of the line as will fit.  By default Vim will display only
" "@" characters if the last line on the screen won't fit when 'wrap' is
" enabled.
"
" If this is enabled Vim will display as much as the last line as will fit and
" display "@@@" at the end.
"
" There is another useful option for 'display' that I rather like: "uhex". This
" will make Vim show unprintable characters as &lt;xx&gt; rather than ^L (Use
" |i_CTRL-V| in insert mode to see the difference.)
set display=lastline

" Better tab completion in the commandline.  Make commandline-completion
" (after you type :) behave more useful and roughly like most shells do.
"
" See 'wildmode' on how to configure the completion mode to your liking.
" 'wildignore' is also a useful setting to ignore binary files such as compiler
" output, images, etc.
set wildmenu
set wildmode=list:longest  " List all matches and complete to the longest match.

" Show (partial) command in bottom-right.  Vim had many commands that
" consist of two or more keystrokes. If this option is enabled Vim will show the
" command you've typed thus-far in the bottom-right of the screen.
"
" It will also show the size of the selection in |visual-mode|.
set showcmd

" Backspace removes 'shiftwidth' worth of spaces.  Remove 'shiftwidth' worth
" of spaces on backspace – like most editors – instead of just a single space.
set smarttab

" Wrap long lines.  When long lines are *not* wrapped Vim will hide any text
" that's larger than the screen and scroll horizontally.
"
" Also see 'breakindent' for continuing wrapped lines on the same indent level
" (requires Vim 7.4.338) and 'linebreak' to wrap only at the end of words.
"
" You can also use |gj| and |gk| to navigate "visual" lines more easily. Many
" people line to override the default behaviour by remapping keys with something
" like:
"
" nnoremap k gk nnoremap j gj nnoremap gk nnoremap gj inoremap gj inoremap gk
set wrap

" Always show the statusline.  By default Vim will show the 'statusline'
" only if there are two or more windows.
"
" The statusline displays useful information about the current buffer and cursor
" position, so it’s useful to always show it.
"
" Also see 'statusline' for controlling/expanding the information shown here.
set laststatus=2

" Show the ruler in the statusline.  The ruler is shown on the right side of
" the 'statusline' and usually contains information about the current cursor
" position and the like.
"
" Also see 'laststatus' to enable displaying the statusline and 'rulerformat'
" for configuring what’s displayed here.
set ruler

" Wrap at n characters.  Automatically break lines at *n* characters.
set textwidth=80

" Jump to search match while typing.  Jump to the first match *while* typing
" the pattern with |/|.
"
" The cursor will jump back to the original position when aborting (&lt;ESC&gt;
" or |CTRL-C|).
set incsearch

" Highlight the last used search pattern.  Highlight the last used search
" pattern.
"
" The last used search pattern is stored in the / register. This will highlight
" whatever is in that pattern.
"
" You can use |:nohlsearch| to clear the highlighting. Many people like to map
" this to e.g. |CTRL-L|:
"
" nnoremap &lt;silent> &lt;C-l> :nohlsearch&lt;CR>&lt;C-l>
set hlsearch

" Searching with / is case-insensitive.  Case-insensitive searching unless
" the pattern contains an upper case letter or if |/\C| is in the pattern.
set ignorecase
set smartcase              " Disable 'ignorecase' if the term contains upper-case.

" Remove octal support from 'nrformats'.  This controls how Vim should
" interpret numbers when pressing |CTRL-A| or |CTRL-X| to increment to decrement
" a number. By default numbers starting with a 0 are treated as octal numbers,
" which can be rather confusing, so remove that.
set nrformats-=octal

set expandtab

" Size of a Tab character.  Number of spaces to display tab characters as.
set tabstop=4

set shiftwidth=0           " Use same value as 'tabstop'.
set softtabstop=-1         " Use same value as 'shiftwidth'.

" Minimum number of lines to keep above/below cursor.  Keep lines above and
" below the screen when scrolling up or down. This is useful so you have some
" context what you’re scrolling to.
"
" Also see 'sidescrolloff'.
set scrolloff=5

" Control automatic formatting.  The 'formatoptions' setting controls how
" automatic formatting when inserting text, formatting with |gq|, as well as
" some other commands.
"
" n – Recognize numbered lists when formatting (see 'formatlistpat').
" c – Wrap comments with 'textwidth'.
" r – Insert comment char after enter.
" o – Insert comment char after |o|/|O|.
" q – Format comments with |gq|.
" l – Do not break lines when they were longer than 'textwidth' to start with.
" j – Remove comment character when joining lines with |J|.
set formatoptions+=ncroqlj

set viminfo+=n~/.vim/tmp/viminfo
set backupdir=$HOME/.vim/tmp/backup
set dir=$HOME/.vim/tmp/swap
set viewdir=$HOME/.vim/tmp/view
if !isdirectory(&backupdir) | call mkdir(&backupdir, 'p', 0700) | endif
if !isdirectory(&dir)       | call mkdir(&dir, 'p', 0700)       | endif
if !isdirectory(&viewdir)   | call mkdir(&viewdir, 'p', 0700)   | endif

" Persist undo history between Vim sessions.  Store undo history to a file,
" so that it can be recalled in future Vim sessions.
"
" Also see "How can I use the undofile?": https://vi.stackexchange.com/q/6/51
" and "Can I be notified when I'm undoing changes from the undofile?":
" https://vi.stackexchange.com/q/2115/51.
if has('persistent_undo')
	set undodir=$HOME/.vim/tmp/undo
	if !isdirectory(&undodir) | call mkdir(&undodir, 'p', 0700) | endif
endif

" Load matchit.vim plugin.  The matchit.vim plugin that comes bundled with
" Vim expands the |%| key to work with various programming language keywords
" (e.g. jumping between if and end in Ruby).
" Only load if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
	runtime! macros/matchit.vim
endif 

" Indent in visual and select mode automatically re-selects.  Selecting some
" text in |visual-mode| and then changing the indentation with |v_>| and |v_<|
" will make Vim lose the visual selection, which is annoying if you want to
" change several levels of indentation.
"
" With this mapping it will re-select the last selection after using &lt; or
" &gt;.
vnoremap > >gv
vnoremap < <gv

" Go to the last cursor location when opening a file.  Go to the last cursor
" location when a file is opened, unless this is a git commit (in which case
" it's annoying).
"
" This uses the information stored in the 'viminfo' file.
augroup jump
	autocmd BufReadPost *
		\  if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
			\| exe 'normal! g`"'
		\| endif
augroup end

" Clean trailing whitespace.  This command removes all trailing whitespace
" in a file, without causing any side-effects.
"
" Also see "What's the simplest way to strip trailing whitespace from all lines
" in a file?": https://vi.stackexchange.com/a/454/51.
fun! s:trim_whitespace()
	let l:save = winsaveview()
	%s/\s\+$//e
	call winrestview(l:save)
endfun
command! TrimWhitespace call s:trim_whitespace()

" https://gist.github.com/dragonken/c29123e597c6fdf022284cf36d245b64
" Get the 2-space YAML as the default when hit carriage return after the colon
" autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" https://stackoverflow.com/questions/45129838/use-only-hard-tab-only-in-certain-files
" If you are asking how to configure whether you use hard tabs (tab characters) vs. 
" spaces for indentation, based on filetype, you can do that using autocmd hooks.
"
" For example, here is my base indent configuration for most files. It sets a tabstop 
" of 8 (for hard tab display), and most tabs / indentation shifts are 4, and they use spaces, not hard tabs.
"set tabstop=8 softtabstop=4 shiftwidth=4 expandtab
set tabstop=8 shiftwidth=4 expandtab
"
" However, in some syntaxes that is wrong. For instance, I want 2 spaces in Javascript and YAML. 
" And in Makefiles, space indent is a syntax error - there, I want hard tabs. You can set these things 
" using autocmd and the filetype in question.
autocmd Filetype make       setlocal noexpandtab
"autocmd Filetype yaml       setlocal shiftwidth=2 softtabstop=2
"autocmd Filetype javascript setlocal shiftwidth=2 softtabstop=2
autocmd Filetype yaml       setlocal shiftwidth=2
autocmd Filetype javascript setlocal shiftwidth=2
"
" If you don't want to specify by file type you can also specify the filename (or a glob to match filenames).
" autocmd BufNewFile,BufRead rsnapshot.conf setlocal noexpandtab

" https://jeffkreeftmeijer.com/vim-number/
set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" http://vim.wikia.com/wiki/Modeline_magic
set modeline
